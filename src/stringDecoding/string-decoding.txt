2. String Decoding
Consider a string that consists of lowercase English alphabetic letters (i.e., [a-z]) only. The following rules are used to encode all of its characters into string s:

a is encoded as 1, b is encoded as 2, c is encoded as 3, …, and i is encoded as 9.
j is encoded as 0#, k is encoded as 1#, l is encoded as 2#, …, and s is encoded as 9#.
t is encoded as 20&, u is encoded as 21&, v is encoded as 22&, …, and z is encoded as 26&.
If there are two or more consecutive occurrences of any character, then the character count is written within parentheses (i.e., [c], where c is an integer denoting the count of consecutive occurrences being encoded) immediately following the encoded character. For example, consider the following string encodings:
String "abzx" is encoded as s = "1226&24&".
String "aabccc" is encoded as s = "1[2]23[3]".
String "bajj" is encoded as s = "210#[2]".
String "wwxyzwww" is encoded as s = "23&[2]24&25&26&23&[3]".
Given an encoded string s, determine the character counts for each letter of the original, decoded string.  Return an integer array of length 26 where index 0 contains the number of 'a' characters, index 1 contains the number of 'b' characters and so on.

 

Function Description

Complete the frequency function in the editor below.  It should return an array of 26 integers as described.

 

frequency has the following parameter:

    s: an encoded string

 

Constraints

String s consists of decimal integers from 0 to 9, #'s, &'s and []'s only.
1 ≤ length of s ≤ 105
It is guaranteed that string s is a valid encoded string.
2 ≤ c ≤ 104, where c is a parenthetical count of consecutive occurrences of an encoded character.
 

Input Format For Custom Testing
Input from stdin will be processed as follows and passed to the function.

 

The only line contains the string s, the encoded string.

Sample Case 0
Sample Input For Custom Testing

1226&24&
 

Sample Output 0

1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1
 

Explanation 0

￼

 

Sample Case 1
Sample Input 1

1[2]23[3]
 

Sample Output 1

2 1 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 

Explanation 1

￼

 

 

Sample Case 2
Sample Input 2

210#[2]
 

Sample Output 2

1 1 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 

Explanation 2

￼